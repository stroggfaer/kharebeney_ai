// ======================== menu.cpp ========================
#include "menu.h"
#include <stdio.h>
#include <string.h>
#include <time.h>
#include "ssd1306.h"
#include "../characters/test.h"
#include "../fonts/icons.h"

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
#include "food/screen_food.h"
#include "game/screen_game.h"
#include "medicine/screen_medicine.h"
#include "toilet/screen_toilet.h"
#include "status/screen_status.h"
#include "study/screen_study.h"
#include "discipline/screen_discipline.h"
#include "settings/screen_settings.h"
#include "main/screen_main.h"
#include "../lib/utlis.h"

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ú–µ–Ω—é: –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —Ä—è–¥—ã –ø—É–Ω–∫—Ç–æ–≤
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
static const char* topMenu[] = {"E", "G", "M", "T"};
static const char* bottomMenu[] = {"C", "Y", "D", "S"};
static const int topCount = 4;
static const int bottomCount = 4;

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–∞—Ç–∞—Ä–µ–∏
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
static void get_time_string(char* buf, size_t len) {
    time_t now;
    struct tm* timeinfo;
    time(&now);
    timeinfo = localtime(&now);
    snprintf(buf, len, "%02d:%02d", timeinfo->tm_hour, timeinfo->tm_min);
}
static int get_battery_percent() {
    return 100; // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞ –±–∞—Ç–∞—Ä–µ–∏
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// ‚öôÔ∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

// –¢–∞–±–ª–∏—Ü–∞ —à—Ä–∏—Ñ—Ç–∞ (–æ–±—ã—á–Ω–æ 8 –±–∞–π—Ç –Ω–∞ —Å–∏–º–≤–æ–ª)
// –£–¥–∞–ª–µ–Ω–æ extern –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ssd1306.h

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
void menu_init(SSD1306_t* oled) {
    ssd1306_clear_screen(oled, false);
    MenuState initState = { .selectedIndex = 0, .currentScreen = 'E', .mode = SCREEN_MAIN };
    menu_draw(oled, &initState);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üé® –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–µ–Ω—é
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
void menu_draw(SSD1306_t* oled, const MenuState* state) {
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ–¥–º–µ–Ω—é, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–∫—Ä–∞–Ω
    if (state->mode == SCREEN_SUBMENU) {
        switch (state->currentScreen) {
            case 'E': // Food
            case 'e':
                draw_screen_food();
                break;
            case 'G': // Game
            case 'g':
                draw_screen_game();
                break;
            case 'M': // Medicine
            case 'm':
                draw_screen_medicine();
                break;
            case 'T': // Toilet
            case 't':
                draw_screen_toilet();
                break;
            case 'C': // Status (Character)
            case 'c':
                draw_screen_status();
                break;
            case 'Y': // Study
            case 'y':
                draw_screen_study();
                break;
            case 'D': // Discipline
            case 'd':
                draw_screen_discipline();
                break;
            case 'S': // Settings
            case 's':
                draw_screen_settings();
                break;
            default:
                // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                ssd1306_clear_screen(oled, false);
                MenuState mainState = { .selectedIndex = 0, .currentScreen = 'E', .mode = SCREEN_MAIN };
                menu_draw(oled, &mainState);
                break;
        }
        return;
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    ssd1306_clear_screen(oled, false);

    char topBuf[32] = "";
    char bottomBuf[32] = "";

    // --- –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ –º–µ–Ω—é ---
    for (int i = 0; i < topCount; i++) {
        char tmp[8];
        if (state->mode == SCREEN_MAIN && state->selectedIndex == i)
            snprintf(tmp, sizeof(tmp), "[%s] ", topMenu[i]);
        else
            snprintf(tmp, sizeof(tmp), " %s  ", topMenu[i]);
        strcat(topBuf, tmp);
    }

    // --- –ù–∏–∂–Ω–∏–π —Ä—è–¥ –º–µ–Ω—é ---
    for (int i = 0; i < bottomCount; i++) {
        char tmp[8];
        if (state->mode == SCREEN_MAIN && state->selectedIndex == i + topCount)
            snprintf(tmp, sizeof(tmp), "[%s] ", bottomMenu[i]);
        else
            snprintf(tmp, sizeof(tmp), " %s  ", bottomMenu[i]);
        strcat(bottomBuf, tmp);
    }

    // --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä—è–¥–æ–≤ –º–µ–Ω—é ---
    // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã 0 –∏ 6 –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    memset(oled->_page[0]._segs, 0, 128);
    memset(oled->_page[6]._segs, 0, 128);

    ssd1306_display_text(oled, 0, topBuf, strlen(topBuf), false);
    ssd1306_display_text(oled, 6, bottomBuf, strlen(bottomBuf), false);

    // --- –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ ---
    if (state->mode == SCREEN_MAIN) {
        draw_screen_main(oled);
    } 

    // --- –°—Ç–∞—Ç—É—Å: –≤—Ä–µ–º—è + –±–∞—Ç–∞—Ä–µ—è ---
    char timeBuf[16];
    char battBuf[8];
    get_time_string(timeBuf, sizeof(timeBuf));
    snprintf(battBuf, sizeof(battBuf), "%d%%", get_battery_percent());
    char status[32];
    snprintf(status, sizeof(status), "%s %s", timeBuf, battBuf);
    
    ssd1306_display_text(oled, 1, status, strlen(status), false);

    ssd1306_show_buffer(oled);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (—á–∞—Å—ã, –±–∞—Ç–∞—Ä–µ—è)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
void menu_update_status(SSD1306_t* oled) {
    char timeBuf[16];
    char battBuf[8];
    get_time_string(timeBuf, sizeof(timeBuf));
    snprintf(battBuf, sizeof(battBuf), "%d%%", get_battery_percent());
    char status[32];
    snprintf(status, sizeof(status), "%s %s", timeBuf, battBuf);
    ssd1306_display_text(oled, 1, status, strlen(status), false);
    ssd1306_show_buffer(oled);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
void menu_handle_input(SSD1306_t* oled, MenuState* state, int btnA, int btnB, int btnC) {
    if (btnA == 0 && state->mode == SCREEN_MAIN) {
        // –õ–∏—Å—Ç–∞–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
        state->selectedIndex = (state->selectedIndex + 1) % (topCount + bottomCount);
        menu_draw(oled, state);
    }

    if (btnB == 0 && state->mode == SCREEN_MAIN) {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        if (state->selectedIndex < topCount)
            state->currentScreen = topMenu[state->selectedIndex][0];
        else
            state->currentScreen = bottomMenu[state->selectedIndex - topCount][0];
        state->mode = SCREEN_SUBMENU;
        menu_draw(oled, state);
    }

    if (btnC == 0 && state->mode == SCREEN_SUBMENU) {
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        state->mode = SCREEN_MAIN;
        menu_draw(oled, state);
    }
}
